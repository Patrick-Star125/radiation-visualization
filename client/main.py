# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets, QtGui
from client.setting import Setting_Form
from client.file import File_Form
from client.images import *
from utils.message_box import *


# 用于查看参数是否初始化的类
class Init():
    def __init__(self):
        self.stat = False


# 重写Qlabel实现点击获取坐标
class Mylabel(QtWidgets.QLabel):

    def __init__(self, Qframe):
        super(Mylabel, self).__init__()
        self.click_x = 0
        self.click_y = 0
        self.antennas = (0, 0)
        self.sub_antenna = None

    def mousePressEvent(self, event: QtGui.QMouseEvent):
        s = event.pos()
        self.setMouseTracking(True)
        self.click_x = s.x()
        self.click_y = s.y()
        print(f"x:{self.click_x} y:{self.click_y}")
        self.draw_antenna(self.click_x, self.click_y, self.antennas)

    def draw_antenna(self, x, y, all_antennas):
        areas, antennas = all_antennas[0], all_antennas[1]
        if areas == 0:
            return 0
        for index, area in enumerate(areas):
            if area[0] < x < area[1] and area[2] < y < area[3]:
                antennas[index].show()
            # if 0 < x < 30 and 0 < y < 30:
            #     self.sub_antenna.show()

    def show_sub_antenna(self):
        self.sub_antenna.show()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1204, 804)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1200, 800))
        MainWindow.setStatusTip("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(-1, -1, 0, -1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(140, 120))
        self.pushButton.setObjectName("pushButton")

        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setMinimumSize(QtCore.QSize(140, 120))
        self.pushButton_2.setObjectName("pushButton_2")

        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        self.pushButton_3.setMinimumSize(QtCore.QSize(140, 120))
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.pushButton_6.sizePolicy().hasHeightForWidth())
        self.pushButton_6.setSizePolicy(sizePolicy)
        self.pushButton_6.setMinimumSize(QtCore.QSize(140, 120))
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout.addWidget(self.pushButton_6)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        self.pushButton_5.setMinimumSize(QtCore.QSize(140, 120))
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout.addWidget(self.pushButton_5)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        self.pushButton_4.setMinimumSize(QtCore.QSize(140, 120))
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())
        self.pushButton_7.setSizePolicy(sizePolicy)
        self.pushButton_7.setMinimumSize(QtCore.QSize(140, 120))
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout.addWidget(self.pushButton_7)
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        self.pushButton_8.setMinimumSize(QtCore.QSize(140, 120))
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalLayout.addWidget(self.pushButton_8)
        self.verticalLayout_3.addLayout(self.horizontalLayout)

        # Mylabel调用父类构造函数传参 并且 设置鼠标可追踪
        self.label = Mylabel(self.centralwidget)
        self.label.setMouseTracking(True)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(1180, 600))
        self.label.setStyleSheet("background-color:rgba(109, 109, 109, 120);\n"
                                 "border-style:solid;\n"
                                 "border-width:1;\n"
                                 "border-color:rgba(0, 0, 0, 180);\n"
                                 )
        self.label.setText("")
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.verticalLayout.addLayout(self.verticalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1204, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setStatusTip("")
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 初始化展示上层阵列图按钮
        self.pushButton_9 = QtWidgets.QPushButton(MainWindow)
        self.pushButton_9.setGeometry(QtCore.QRect(60, 660, 110, 45))
        self.pushButton_9.setText("生成矩阵")
        self.pushButton_9.setObjectName("subarray")
        self.pushButton_9.clicked.connect(self.label.show_sub_antenna)
        self.pushButton_9.setStyleSheet(
            '\n            QPushButton#subarray{\n                width: 20px;\n                height: 40px;\n '
            '           background-color: gray;\n                border: 3px solid gray;\n                '
            'border-radius: 5px;\n                color: white;\n                font-family: Microsoft YaHei UI;\n   '
            '             font-size: 25px;\n            }\n            QPushButton#subarray:hover{\n             '
            '   width: 20px;\n                height: 40px;\n                background-color: rgb(65,65,65);\n       '
            '         border: 3px solid gray;\n                border-radius: 5px;\n                border-color: '
            'rgb(65,65,65);\n                color: white;\n                font-family: Microsoft YaHei UI;\n        '
            '    }\n            QPushButton#subarray:pressed{\n                width: 20px;\n                '
            'height: 40px;\n                background-color: rgb(1,1,1);\n                border: 3px solid gray;\n  '
            '              border-radius: 5px;\n                border-color: rgb(1,1,1);\n                color: '
            'white;\n                font-family: Microsoft YaHei UI;\n            }\n        ')
        self.pushButton_9.hide()

        # 查看是否已经设置过参数
        self.init_set = Init()

        # 点击文件按钮触发子窗口
        self.fileWin = File_Form()
        self.fileExc = QtWidgets.QWidget()
        self.fileWin.setupUi(Form=self.fileExc)
        self.fileWin.retranslateUi(Form=self.fileExc)
        self.fileWin.retranslateUi(Form=self.fileExc)
        self.pushButton.clicked.connect(self.show_file)

        # 点击设置按钮触发子窗口
        self.setWin = Setting_Form()
        self.setExc = QtWidgets.QWidget()
        self.setWin.setupUi(Form=self.setExc)
        self.setWin.retranslateUi(Form=self.setExc)
        self.pushButton_2.clicked.connect(self.show_setting)

        # 设置保存图片的号数
        self.check = 0
        # 点击阵列形状按钮显示图片
        self.pushButton_3.clicked.connect(lambda: ArrayDiagram(self.label, init=self.init_set, setWin=self.setWin))
        self.pushButton_3.clicked.connect(lambda: self.choose_num(1))
        # 点击馈电网络按钮显示图片
        self.pushButton_6.clicked.connect(lambda: draw_figure2(self.label, init=self.init_set))
        self.pushButton_6.clicked.connect(lambda: self.choose_num(2))
        # 点击方向图按钮显示图片
        self.pushButton_5.clicked.connect(lambda: draw_figure3(self.label, init=self.init_set))
        self.pushButton_5.clicked.connect(lambda: self.choose_num(3))
        # 点击激励电流按钮显示图片
        self.pushButton_4.clicked.connect(lambda: draw_figure4(self.label, init=self.init_set))
        self.pushButton_4.clicked.connect(lambda: self.choose_num(4))
        # 点击能量分布按钮显示图片
        self.pushButton_7.clicked.connect(lambda: draw_figure5(self.label, init=self.init_set))
        self.pushButton_7.clicked.connect(lambda: self.choose_num(5))

        # 导入设置按钮触发
        self.fileWin.pushButton.clicked.connect(
            lambda: self.fileWin.loadSetting(setWin=self.setWin, init=self.init_set))
        # 导出设置按钮触发
        self.fileWin.pushButton_2.clicked.connect(
            lambda: self.fileWin.saveSetting(setWin=self.setWin, init=self.init_set))
        # 保存图片按钮触发
        self.fileWin.pushButton_3.clicked.connect(
            lambda: self.fileWin.save_one_figure(num=self.check, init=self.init_set))
        # 保存全部图片按钮触发
        self.fileWin.pushButton_4.clicked.connect(lambda: self.fileWin.save_all_figure(init=self.init_set))

        # 设置确认按钮触发
        self.setWin.pushButton_2.clicked.connect(lambda: self.setWin.confirm_input(init=self.init_set))
        # 设置取消按钮触发
        self.setWin.pushButton_3.clicked.connect(self.setExc.close)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setToolTip(_translate("MainWindow", "文件操作"))
        self.pushButton.setStatusTip(_translate("MainWindow", "文件操作"))
        self.pushButton.setText(_translate("MainWindow", "文件"))
        self.pushButton_2.setToolTip(_translate("MainWindow", "定义参数"))
        self.pushButton_2.setStatusTip(_translate("MainWindow", "定义参数"))
        self.pushButton_2.setText(_translate("MainWindow", "设置"))
        self.pushButton_3.setToolTip(_translate("MainWindow", "展示阵列形状图"))
        self.pushButton_3.setStatusTip(_translate("MainWindow", "展示阵列形状图"))
        self.pushButton_3.setText(_translate("MainWindow", "阵列形状"))
        self.pushButton_6.setToolTip(_translate("MainWindow", "展示馈电网络图"))
        self.pushButton_6.setStatusTip(_translate("MainWindow", "展示馈电网络图"))
        self.pushButton_6.setText(_translate("MainWindow", "馈电网络"))
        self.pushButton_5.setToolTip(_translate("MainWindow", "展示2D和3D方向图"))
        self.pushButton_5.setStatusTip(_translate("MainWindow", "展示2D和3D方向图"))
        self.pushButton_5.setText(_translate("MainWindow", "方向图"))
        self.pushButton_4.setToolTip(_translate("MainWindow", "展示激励电流图"))
        self.pushButton_4.setStatusTip(_translate("MainWindow", "展示激励电流图"))
        self.pushButton_4.setText(_translate("MainWindow", "激励电流"))
        self.pushButton_7.setToolTip(_translate("MainWindow", "展示能量分布图"))
        self.pushButton_7.setStatusTip(_translate("MainWindow", "展示能量分布图"))
        self.pushButton_7.setText(_translate("MainWindow", "能量分布"))
        self.pushButton_8.setToolTip(_translate("MainWindow", "进行标准检验"))
        self.pushButton_8.setStatusTip(_translate("MainWindow", "进行标准检验"))
        self.pushButton_8.setText(_translate("MainWindow", "标准检验"))
        self.label.setStatusTip(_translate("MainWindow", "展示栏"))

    # 打开文件子窗口
    def show_file(self):
        self.fileExc.show()

    # 打开设置子窗口
    def show_setting(self):
        self.setExc.show()

    # 设置check为当前显示的图片
    def choose_num(self, num):
        self.check = num

        if num == 1:
            self.pushButton_9.show()
        else:
            self.pushButton_9.hide()
